{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sparkles\\\\Documents\\\\My_Projects\\\\todo_list\\\\src\\\\game\\\\Puzzle\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game';\nimport Moves from './components/Moves';\nimport Time from './components/Time';\nimport NewGameButton from './components/NewGameButton';\nimport Win from './components/Win';\nimport ChangeSize from './components/ChangeSize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GamePuzzle extends Component {\n  constructor(props) {\n    super(props);\n    this.parseTime = () => {\n      let timeStr = '';\n      let time = this.state.time;\n      if (time < 60) timeStr = time + 's';else timeStr = Math.floor(time / 60) + 'm ' + time % 60 + 's';\n      return timeStr;\n    };\n    this.newBoard = () => {\n      let board = [];\n      let size = this.state.size;\n      //board = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0];\n      for (let i = 0; i < size * size; i++) {\n        board.push(i);\n      } //generate a 0...size**2 array\n      do {\n        board.sort(function (a, b) {\n          return 0.5 - Math.random();\n        }); //randomise the array\n      } while (!this.checkIfSolvable(board, size));\n      clearInterval(this.timer);\n      this.setState({\n        moves: 0,\n        time: 0,\n        board,\n        win: false\n      }); //reset state\n    };\n    this.startTimer = () => {\n      this.setState({\n        time: this.state.time + 1\n      });\n      this.timer = setInterval(() => {\n        this.setState({\n          time: this.state.time + 1\n        });\n      }, 1000);\n    };\n    this.swap = (a, b, board) => {\n      let temp = board[a];\n      board[a] = board[b];\n      board[b] = temp;\n      return board;\n    };\n    this.checkWin = () => {\n      let tempBoard = [];\n      for (let i = 0; i < this.state.size * this.state.size; i++) {\n        tempBoard.push(i + 1);\n      }\n      tempBoard[tempBoard.length - 1] = 0;\n      if (tempBoard.length !== this.state.board.length) return false;\n      for (var i = 0; i < tempBoard.length; i++) {\n        if (tempBoard[i] !== this.state.board[i]) return false;\n      }\n      return true;\n    };\n    this.move = key => {\n      if (this.state.board[key] === 0) {\n        return;\n      } //dont move if clicked on empty tile\n\n      let direction = this.checkPossibleDirection(key);\n      if (direction) {\n        if (!this.state.time) {\n          //start timer on first move\n          this.startTimer();\n        }\n        this.setState({\n          moves: this.state.moves + 1\n        }); //increment moves counter\n        let currentIndex = this.state.board.findIndex(v => v === 0);\n        let tempBoard = [...this.state.board];\n        while (currentIndex !== key) {\n          switch (direction) {\n            case 'up':\n              tempBoard = this.swap(currentIndex, currentIndex + this.state.size, tempBoard);\n              currentIndex = currentIndex + this.state.size;\n              break;\n            case 'down':\n              tempBoard = this.swap(currentIndex, currentIndex - this.state.size, tempBoard);\n              currentIndex = currentIndex - this.state.size;\n              break;\n            case 'left':\n              tempBoard = this.swap(currentIndex, currentIndex + 1, tempBoard);\n              currentIndex = currentIndex + 1;\n              break;\n            case 'right':\n              tempBoard = this.swap(currentIndex, currentIndex - 1, tempBoard);\n              currentIndex = currentIndex - 1;\n              break;\n            default:\n              break;\n          }\n        }\n        this.setState({\n          board: tempBoard\n        }, () => {\n          if (this.checkWin()) {\n            clearInterval(this.timer);\n            this.setState({\n              win: true\n            });\n          } else if (this.state.win) {\n            this.setState({\n              win: false\n            });\n            this.startTimer();\n          }\n        });\n      }\n    };\n    this.checkPossibleDirection = key => {\n      let index = key; //reset key value\n      //check up\n      while (key >= this.state.size) {\n        key -= this.state.size;\n        if (this.state.board[key] === 0) return \"up\";\n      }\n      //check down\n      key = index;\n      while (key < this.state.size * (this.state.size - 1)) {\n        key += this.state.size;\n        if (this.state.board[key] === 0) return \"down\";\n      }\n      //check left\n      key = index;\n      while (key > index - index % this.state.size) {\n        key -= 1;\n        if (this.state.board[key] === 0) return \"left\";\n      }\n      //check right\n      key = index;\n      while (key < index + this.state.size - index % this.state.size - 1) {\n        key += 1;\n        if (this.state.board[key] === 0) return \"right\";\n      }\n      return 0;\n    };\n    this.changeSize = size => {\n      this.setState({\n        size\n      }, () => this.newBoard());\n    };\n    this.state = {\n      size: 4,\n      moves: 0,\n      time: 0,\n      board: [],\n      win: false\n    };\n  }\n  componentDidMount() {\n    this.newBoard();\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  checkIfSolvable(board, size) {\n    //count inversions\n    let invCount = 0;\n    for (let i = 0; i < size * size - 1; i++) {\n      for (let j = i + 1; j < size * size; j++) {\n        if (board[i] && board[j] && board[i] > board[j]) invCount++;\n      }\n    }\n    //check if blank is in a even or odd row\n    let blankPos = 0;\n    blankPos = Math.abs(Math.floor(board.findIndex(v => v === 0) / size) - size);\n    if (size % 2) return !(invCount % 2);else {\n      if (blankPos % 2) return !(invCount % 2);else return !!(invCount % 2);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bodyPuzzle\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Menu\",\n          children: [/*#__PURE__*/_jsxDEV(NewGameButton, {\n            onClick: this.newBoard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Time, {\n            time: this.parseTime()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Moves, {\n            moves: this.state.moves\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Game, {\n          board: this.state.board,\n          move: this.move,\n          size: this.state.size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ChangeSize, {\n          onClick: this.changeSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Win, {\n          win: this.state.win,\n          time: this.parseTime(),\n          moves: this.state.moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Game","Moves","Time","NewGameButton","Win","ChangeSize","GamePuzzle","constructor","props","parseTime","timeStr","time","state","Math","floor","newBoard","board","size","i","push","sort","a","b","random","checkIfSolvable","clearInterval","timer","setState","moves","win","startTimer","setInterval","swap","temp","checkWin","tempBoard","length","move","key","direction","checkPossibleDirection","currentIndex","findIndex","v","index","changeSize","componentDidMount","componentWillUnmount","invCount","j","blankPos","abs","render"],"sources":["C:/Users/Sparkles/Documents/My_Projects/todo_list/src/game/Puzzle/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Game from './components/Game';\r\nimport Moves from './components/Moves';\r\nimport Time from './components/Time';\r\nimport NewGameButton from './components/NewGameButton';\r\nimport Win from './components/Win';\r\nimport ChangeSize from './components/ChangeSize';\r\n\r\nexport default class GamePuzzle extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { size: 4, moves: 0, time: 0, board: [], win: false }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.newBoard();\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  parseTime = () => {\r\n    let timeStr = '';\r\n    let time = this.state.time;\r\n    if(time<60) timeStr = time+'s';\r\n    else timeStr = Math.floor(time/60) + 'm '+time%60 + 's';\r\n    return timeStr;\r\n  }\r\n\r\n\r\n  newBoard = () => {\r\n    let board = [];\r\n    let size = this.state.size;\r\n    //board = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0];\r\n    for(let i = 0; i<size*size; i++) {board.push(i)} //generate a 0...size**2 array\r\n    do{\r\n      board.sort(function(a, b){return 0.5 - Math.random()}); //randomise the array\r\n    }\r\n    while(!this.checkIfSolvable(board, size));\r\n    clearInterval(this.timer);\r\n    this.setState({moves: 0, time: 0, board, win:false}); //reset state\r\n  }\r\n\r\n  checkIfSolvable(board, size){\r\n    //count inversions\r\n    let invCount = 0;\r\n    for(let i = 0; i < size*size-1; i++) {\r\n      for(let j = i+1; j < size*size; j++) {\r\n        if(board[i] && board[j] && board[i] > board[j]) invCount++;\r\n      }\r\n    }\r\n    //check if blank is in a even or odd row\r\n    let blankPos = 0;\r\n    blankPos = Math.abs(Math.floor(board.findIndex((v)=>v===0)/size)-size);\r\n    if(size%2) return !(invCount%2);\r\n    else {\r\n      if(blankPos%2) return !(invCount%2);\r\n      else return !!(invCount%2);\r\n    }\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.setState( {time: this.state.time+1});\r\n    this.timer = setInterval( () => {this.setState( {time: this.state.time+1})}, 1000 );\r\n  }\r\n\r\n  swap = (a,b, board) => {\r\n    let temp = board[a];\r\n    board[a] = board[b];\r\n    board[b] = temp;\r\n    return board;\r\n  }\r\n\r\n  checkWin = () => {\r\n    let tempBoard = [];\r\n    for(let i = 0; i<this.state.size*this.state.size; i++) {tempBoard.push(i+1)}\r\n    tempBoard[tempBoard.length-1] = 0;\r\n    if(tempBoard.length !== this.state.board.length) return false;\r\n    for (var i = 0; i < tempBoard.length; i++) {\r\n      if (tempBoard[i] !== this.state.board[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  move = (key) => {\r\n    if(this.state.board[key] === 0) { return } //dont move if clicked on empty tile\r\n\r\n    let direction = this.checkPossibleDirection(key);\r\n    if(direction) {\r\n      if(!this.state.time) { //start timer on first move\r\n        this.startTimer();\r\n      }\r\n      this.setState({moves: this.state.moves+1}); //increment moves counter\r\n      let currentIndex = this.state.board.findIndex((v)=>v===0);\r\n      let tempBoard = [...this.state.board];\r\n      while(currentIndex!==key){\r\n        switch(direction) {\r\n          case 'up':\r\n              tempBoard = this.swap(currentIndex, currentIndex+this.state.size, tempBoard);\r\n              currentIndex = currentIndex+this.state.size;\r\n            break;\r\n          case 'down':\r\n              tempBoard = this.swap(currentIndex, currentIndex-this.state.size, tempBoard);\r\n              currentIndex = currentIndex-this.state.size;\r\n            break;\r\n          case 'left':\r\n              tempBoard = this.swap(currentIndex, currentIndex+1, tempBoard);\r\n              currentIndex = currentIndex+1;\r\n            break;\r\n          case 'right':\r\n              tempBoard = this.swap(currentIndex, currentIndex-1, tempBoard);\r\n              currentIndex = currentIndex-1;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      this.setState({board: tempBoard}, () => {\r\n        if(this.checkWin()) {\r\n          clearInterval(this.timer);\r\n          this.setState({win: true});\r\n        } else if(this.state.win) {\r\n          this.setState({win: false});\r\n          this.startTimer();\r\n      }\r\n      });\r\n    }\r\n  }\r\n\r\n  checkPossibleDirection = (key) => {\r\n    let index=key; //reset key value\r\n    //check up\r\n    while(key >= this.state.size) {\r\n      key-=this.state.size;\r\n      if(this.state.board[key] === 0) return \"up\";\r\n    }\r\n    //check down\r\n    key = index;\r\n    while(key < this.state.size*(this.state.size-1)) {\r\n      key+=this.state.size;\r\n      if(this.state.board[key] === 0) return \"down\";\r\n    }\r\n    //check left\r\n    key = index;\r\n    while(key> index-index%this.state.size) {\r\n      key-=1;\r\n      if(this.state.board[key] === 0) return \"left\";\r\n    }\r\n    //check right\r\n    key = index;\r\n    while(key< (index+this.state.size-(index%this.state.size))-1) {\r\n      key+=1;\r\n      if(this.state.board[key] === 0) return \"right\";\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  changeSize = (size) => {\r\n    this.setState({size}, () => this.newBoard());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"bodyPuzzle\">\r\n      <div className=\"App\">\r\n        <div className=\"Menu\">\r\n          <NewGameButton onClick={this.newBoard}/>\r\n          <Time time={this.parseTime()}/>\r\n          <Moves moves={this.state.moves}/>\r\n        </div>\r\n        <Game board={this.state.board} move={this.move} size={this.state.size}/>\r\n        <ChangeSize onClick={this.changeSize}/>\r\n        <Win win={this.state.win} time={this.parseTime()} moves={this.state.moves}/>\r\n      </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}