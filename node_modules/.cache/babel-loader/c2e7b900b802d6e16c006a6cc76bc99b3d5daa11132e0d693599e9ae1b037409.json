{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sparkles\\\\Documents\\\\My_Projects\\\\todo_list\\\\src\\\\game\\\\TicTacToe\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Square from \"../Square/Square\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    setScores\n  } = _ref;\n  const [nodes, setNodes] = useState({});\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\n  const [winLine, setWinLine] = useState([]);\n  const gameReset = () => {\n    setWinLine([]);\n    setBoard(Array(9).fill(\"\"));\n  };\n  const getAvailableMoves = board => {\n    const moves = [];\n    board.forEach((cell, index) => {\n      if (!cell) moves.push(index);\n    });\n    return moves;\n  };\n  const handleClick = id => {\n    if (isTerminal(board).winner === \"X\" || isTerminal(board).winner === \"O\" || isFull(board)) {\n      gameReset();\n      return;\n    }\n    if (board[id] !== \"\") return;\n    let editedBoard = [...board];\n    editedBoard[id] = \"X\";\n    setBoard(editedBoard);\n    if (isTerminal(editedBoard).winner === \"X\") {\n      console.log(isTerminal(editedBoard));\n      setWinLine(isTerminal(editedBoard).winLine);\n      setScores(prevState => ({\n        ...prevState,\n        x: prevState.x + 1\n      }));\n      return;\n    }\n    let randomNumber = getBestMove(editedBoard, 0, false);\n    if (editedBoard[randomNumber] === \"\") {\n      editedBoard[randomNumber] = \"O\";\n    }\n    setBoard(editedBoard);\n    if (isTerminal(editedBoard).winner === \"O\") {\n      setWinLine(isTerminal(editedBoard).winLine);\n      setScores(prevState => ({\n        ...prevState,\n        o: prevState.o + 1\n      }));\n      return;\n    }\n    if (isTerminal(editedBoard).winner === \"draw\") {\n      setScores(prevState => ({\n        ...prevState,\n        tie: prevState.tie + 1\n      }));\n    }\n  };\n  const isEmpty = board => {\n    return board.every(cell => !cell);\n  };\n  const isFull = board => {\n    return board.every(cell => cell);\n  };\n  const isTerminal = board => {\n    if (isEmpty(board)) return false;\n    if (board[0] === board[1] && board[0] === board[2] && board[0]) {\n      return {\n        winner: board[0],\n        winLine: [0, 1, 2]\n      };\n    }\n    if (board[3] === board[4] && board[3] === board[5] && board[3]) {\n      return {\n        winner: board[3],\n        winLine: [3, 4, 5]\n      };\n    }\n    if (board[6] === board[7] && board[6] === board[8] && board[6]) {\n      return {\n        winner: board[6],\n        winLine: [6, 7, 8]\n      };\n    }\n    if (board[0] === board[3] && board[0] === board[6] && board[0]) {\n      return {\n        winner: board[0],\n        winLine: [0, 3, 6]\n      };\n    }\n    if (board[1] === board[4] && board[1] === board[7] && board[1]) {\n      return {\n        winner: board[1],\n        winLine: [1, 4, 7]\n      };\n    }\n    if (board[2] === board[5] && board[2] === board[8] && board[2]) {\n      return {\n        winner: board[2],\n        winLine: [2, 5, 8]\n      };\n    }\n    if (board[0] === board[4] && board[0] === board[8] && board[0]) {\n      return {\n        winner: board[0],\n        winLine: [0, 4, 8]\n      };\n    }\n    if (board[2] === board[4] && board[2] === board[6] && board[2]) {\n      return {\n        winner: board[2],\n        winLine: [2, 4, 6]\n      };\n    }\n    if (isFull(board)) {\n      return {\n        winner: \"draw\"\n      };\n    }\n    return false;\n  };\n  const getBestMove = function (newBoard, depth, isMax) {\n    let callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => {};\n    if (depth === 0) setNodes({});\n    if (isTerminal(newBoard) || depth === -1) {\n      if (isTerminal(newBoard).winner === \"X\") {\n        return 100 - depth;\n      } else if (isTerminal(newBoard).winner === \"O\") {\n        return -100 + depth;\n      }\n      return 0;\n    }\n    if (isMax) {\n      let best = -100;\n      getAvailableMoves(newBoard).forEach(index => {\n        let child = [...newBoard];\n        child[index] = \"X\";\n        let score = getBestMove(child, depth + 1, false, callback);\n        best = Math.max(best, score);\n      });\n      return best;\n    }\n    if (!isMax) {\n      let best = 100;\n      getAvailableMoves(newBoard).forEach(index => {\n        let child = [...newBoard];\n        child[index] = \"O\";\n        let score = getBestMove(child, depth + 1, true, callback);\n        best = Math.min(best, score);\n        if (depth === 0) {\n          console.log(nodes);\n          const moves = nodes[score] ? `${nodes[score]},${index}` : index;\n          nodes[score] = moves;\n        }\n      });\n      if (depth === 0) {\n        let returnValue;\n        if (typeof nodes[best] === \"string\") {\n          const arr = nodes[best].split(\",\");\n          const rand = Math.floor(Math.random() * arr.length);\n          returnValue = arr[rand];\n        } else {\n          returnValue = nodes[best];\n        }\n        callback(returnValue);\n        return returnValue;\n      }\n      return best;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((val, i) => {\n      return /*#__PURE__*/_jsxDEV(Square, {\n        id: i,\n        value: val,\n        handleClick: handleClick,\n        board: winLine\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"iKMy3SkQCIefkaZlnkoPvO7Luv8=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","Square","Board","setScores","nodes","setNodes","board","setBoard","Array","fill","winLine","setWinLine","gameReset","getAvailableMoves","moves","forEach","cell","index","push","handleClick","id","isTerminal","winner","isFull","editedBoard","console","log","prevState","x","randomNumber","getBestMove","o","tie","isEmpty","every","newBoard","depth","isMax","callback","best","child","score","Math","max","min","returnValue","arr","split","rand","floor","random","length","map","val","i"],"sources":["C:/Users/Sparkles/Documents/My_Projects/todo_list/src/game/TicTacToe/Board/Board.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport Square from \"../Square/Square\";\r\nimport \"./Board.css\";\r\n\r\nfunction Board({ setScores }) {\r\n  const [nodes, setNodes] = useState({});\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n  const [winLine, setWinLine] = useState([]);\r\n\r\n  const gameReset = () => {\r\n    setWinLine([]);\r\n    setBoard(Array(9).fill(\"\"));\r\n  };\r\n\r\n  const getAvailableMoves = (board) => {\r\n    const moves = [];\r\n    board.forEach((cell, index) => {\r\n      if (!cell) moves.push(index);\r\n    });\r\n    return moves;\r\n  };\r\n\r\n  const handleClick = (id) => {\r\n    if (\r\n      isTerminal(board).winner === \"X\" ||\r\n      isTerminal(board).winner === \"O\" ||\r\n      isFull(board)\r\n    ) {\r\n      gameReset();\r\n      return;\r\n    }\r\n\r\n    if (board[id] !== \"\") return;\r\n\r\n    let editedBoard = [...board];\r\n    editedBoard[id] = \"X\";\r\n\r\n    setBoard(editedBoard);\r\n\r\n    if (isTerminal(editedBoard).winner === \"X\") {\r\n      console.log(isTerminal(editedBoard));\r\n      setWinLine(isTerminal(editedBoard).winLine);\r\n      setScores((prevState) => ({ ...prevState, x: prevState.x + 1 }));\r\n      return;\r\n    }\r\n\r\n    let randomNumber = getBestMove(editedBoard, 0, false);\r\n    if (editedBoard[randomNumber] === \"\") {\r\n      editedBoard[randomNumber] = \"O\";\r\n    }\r\n\r\n    setBoard(editedBoard);\r\n\r\n    if (isTerminal(editedBoard).winner === \"O\") {\r\n      setWinLine(isTerminal(editedBoard).winLine);\r\n      setScores((prevState) => ({ ...prevState, o: prevState.o + 1 }));\r\n      return;\r\n    }\r\n\r\n    if (isTerminal(editedBoard).winner === \"draw\") {\r\n      setScores((prevState) => ({ ...prevState, tie: prevState.tie + 1 }));\r\n    }\r\n  };\r\n\r\n  const isEmpty = (board) => {\r\n    return board.every((cell) => !cell);\r\n  };\r\n\r\n  const isFull = (board) => {\r\n    return board.every((cell) => cell);\r\n  };\r\n\r\n  const isTerminal = (board) => {\r\n    if (isEmpty(board)) return false;\r\n\r\n    if (board[0] === board[1] && board[0] === board[2] && board[0]) {\r\n      return { winner: board[0], winLine: [0, 1, 2] };\r\n    }\r\n    if (board[3] === board[4] && board[3] === board[5] && board[3]) {\r\n      return { winner: board[3], winLine: [3, 4, 5] };\r\n    }\r\n    if (board[6] === board[7] && board[6] === board[8] && board[6]) {\r\n      return { winner: board[6], winLine: [6, 7, 8] };\r\n    }\r\n\r\n    if (board[0] === board[3] && board[0] === board[6] && board[0]) {\r\n      return { winner: board[0], winLine: [0, 3, 6] };\r\n    }\r\n    if (board[1] === board[4] && board[1] === board[7] && board[1]) {\r\n      return { winner: board[1], winLine: [1, 4, 7] };\r\n    }\r\n    if (board[2] === board[5] && board[2] === board[8] && board[2]) {\r\n      return { winner: board[2], winLine: [2, 5, 8] };\r\n    }\r\n\r\n    if (board[0] === board[4] && board[0] === board[8] && board[0]) {\r\n      return { winner: board[0], winLine: [0, 4, 8] };\r\n    }\r\n    if (board[2] === board[4] && board[2] === board[6] && board[2]) {\r\n      return { winner: board[2], winLine: [2, 4, 6] };\r\n    }\r\n\r\n    if (isFull(board)) {\r\n      return { winner: \"draw\" };\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const getBestMove = (newBoard, depth, isMax, callback = () => {}) => {\r\n    if (depth === 0) setNodes({});\r\n\r\n    if (isTerminal(newBoard) || depth === -1) {\r\n      if (isTerminal(newBoard).winner === \"X\") {\r\n        return 100 - depth;\r\n      } else if (isTerminal(newBoard).winner === \"O\") {\r\n        return -100 + depth;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    if (isMax) {\r\n      let best = -100;\r\n\r\n      getAvailableMoves(newBoard).forEach((index) => {\r\n        let child = [...newBoard];\r\n        child[index] = \"X\";\r\n\r\n        let score = getBestMove(child, depth + 1, false, callback);\r\n        best = Math.max(best, score);\r\n      });\r\n\r\n      return best;\r\n    }\r\n\r\n    if (!isMax) {\r\n      let best = 100;\r\n\r\n      getAvailableMoves(newBoard).forEach((index) => {\r\n        let child = [...newBoard];\r\n        child[index] = \"O\";\r\n\r\n        let score = getBestMove(child, depth + 1, true, callback);\r\n        best = Math.min(best, score);\r\n\r\n        if (depth === 0) {\r\n          console.log(nodes);\r\n          const moves = nodes[score] ? `${nodes[score]},${index}` : index;\r\n          nodes[score] = moves;\r\n        }\r\n      });\r\n      if (depth === 0) {\r\n        let returnValue;\r\n\r\n        if (typeof nodes[best] === \"string\") {\r\n          const arr = nodes[best].split(\",\");\r\n          const rand = Math.floor(Math.random() * arr.length);\r\n          returnValue = arr[rand];\r\n        } else {\r\n          returnValue = nodes[best];\r\n        }\r\n\r\n        callback(returnValue);\r\n        return returnValue;\r\n      }\r\n      return best;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((val, i) => {\r\n        return (\r\n          <Square\r\n            key={i}\r\n            id={i}\r\n            value={val}\r\n            handleClick={handleClick}\r\n            board={winLine}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}